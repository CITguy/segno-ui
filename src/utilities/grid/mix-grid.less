#grid {
  .row {
    display: flex;
    flex-wrap: wrap;
  }

  .col {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    margin: 0;
  }

  .span(@n) {
    @basis: (@n * @grid-column-unit);
    flex: 0 0 @basis;
    max-width: @basis;
  }

  .offset(@n) {
    margin-left: (@n * @grid-column-unit) !important;
  }
}//#grid

#space {
  .container {
    .xs {
      padding: 0.25rem;
    }
    .sm {
      padding: 0.5rem;
    }
    .md {
      padding: 1rem;
    }
    .lg {
      padding: 1.5rem;
    }
    .xl {
      padding: 2rem;
    }
  }
}//#space

.make-spans (@breakpoint, @n) when (@n > 0) and (@breakpoint = xs) {
  .dsCol-@{n},
  .dsCol-@{n}-@{breakpoint} {
    #grid.span(@n);
  }
  .make-spans(@breakpoint, (@n - 1));
}
.make-spans (@breakpoint, @n) when (@n > 0) and not (@breakpoint = xs) {
  .dsCol-@{n}-@{breakpoint} {
    #grid.span(@n);
  }
  .make-spans(@breakpoint, (@n - 1));
}

.make-offsets (@breakpoint, @n) when (@n >= 0) and (@breakpoint = xs) {
  .dsOffset-@{n},
  .dsOffset-@{n}-@{breakpoint} {
    #grid.offset(@n);
  }
  .make-offsets(@breakpoint, (@n - 1));
}
.make-offsets (@breakpoint, @n) when (@n >= 0) and not (@breakpoint = xs) {
  .dsOffset-@{n}-@{breakpoint} {
    #grid.offset(@n);
  }
  .make-offsets(@breakpoint, (@n - 1));
}

.make-orders (@breakpoint, @n) when (@n > 0) and (@breakpoint = xs) {
  .dsOrder-@{n},
  .dsOrder-@{n}-@{breakpoint} {
    order: @n;
  }
  .make-orders(@breakpoint, (@n - 1));
}
.make-orders (@breakpoint, @n) when (@n > 0) and not (@breakpoint = xs) {
  .dsOrder-@{n}-@{breakpoint} {
    order: @n;
  }
  .make-orders(@breakpoint, (@n - 1));
}

.make-grid (@breakpoint) {
  // 1 to N
  .make-spans(@breakpoint, @grid-column-count);
  // 0 to N
  .make-offsets(@breakpoint, @grid-column-count);
  // 1 to N
  .make-orders(@breakpoint, @grid-column-count);

  .dsHide-@{breakpoint} {
    display: none;
  }
}
