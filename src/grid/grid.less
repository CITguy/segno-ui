/* ===== CSS Class-Based Flexbox Grid System ===== */
.flex-row {
  box-sizing: border-box;
  display: flex;
  flex-grow: 1;
  flex-wrap: wrap;
}

.flex-col {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
  flex-grow: 1;
}

.grid-row {
  &:extend(.flex-row);
  background-clip: content-box;
  border: 0;
  margin: 0 -(@grid-gutter-width * 0.5);
  padding: 0;
}

.grid-col {
  &:extend(.flex-col);
  background-clip: content-box;
  border: 0;
  margin: 0;
  padding: 0 (@grid-gutter-width * 0.5);
}

/* Grid Mixins */
.grid-columns (@prefix, @n) when (@n > 0) and (@prefix = xs) {
  .span-@{n},
  .span-@{prefix}-@{n} {
    @width: (@n * @grid-column-unit);
    flex-grow: 0;
    min-width: @width;
    width: @width;
  }
  .grid-columns(@prefix, @n - 1);
}
.grid-columns (@prefix, @n) when (@n > 0) and not (@prefix = xs) {
  .span-@{prefix}-@{n} {
    @width: (@n * @grid-column-unit);
    flex-grow: 0;
    min-width: @width;
    width: @width;
  }
  .grid-columns(@prefix, @n - 1);
}

.grid-offsets (@prefix, @n) when (@n > 0) and (@prefix = xs) {
  .offset-@{n},
  .offset-@{prefix}-@{n} {
    margin-left: (@n * @grid-column-unit) !important;
  }
  .grid-offsets(@prefix, @n - 1);
}
.grid-offsets (@prefix, @n) when (@n > 0) and not (@prefix = xs) {
  .offset-@{prefix}-@{n} {
    margin-left: (@n * @grid-column-unit) !important;
  }
  .grid-offsets(@prefix, @n - 1);
}

.grid-orders (@prefix, @n) when (@n > 0) and (@prefix = xs) {
  .order-@{n},
  .order-@{prefix}-@{n} {
    order: @n;
  }
  .grid-orders(@prefix, @n - 1);
}
.grid-orders (@prefix, @n) when (@n > 0) and not (@prefix = xs) {
  .order-@{prefix}-@{n} {
    order: @n;
  }
  .grid-orders(@prefix, @n - 1);
}

/* GRID */
@media (min-width: @grid-break-wrist) {
  .grid-columns(xs, @grid-column-count);
  .grid-offsets(xs, @grid-column-count);
  .grid-orders(xs, @grid-column-count);
}

@media (min-width: @grid-break-palm) {
  .grid-columns(sm, @grid-column-count);
  .grid-offsets(sm, @grid-column-count);
  .grid-orders(sm, @grid-column-count);
}

@media (min-width: @grid-break-lap) {
  .grid-columns(md, @grid-column-count);
  .grid-offsets(md, @grid-column-count);
  .grid-orders(md, @grid-column-count);
}

@media (min-width: @grid-break-desk) {
  .grid-columns(lg, @grid-column-count);
  .grid-offsets(lg, @grid-column-count);
  .grid-orders(lg, @grid-column-count);
}

@media (min-width: @grid-break-wall) {
  .grid-columns(xl, @grid-column-count);
  .grid-offsets(xl, @grid-column-count);
  .grid-orders(xl, @grid-column-count);
}
